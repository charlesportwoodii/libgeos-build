sudo: required
dist: bionic

env:
  global:
    - secure: "NhmBmURrqlAWvL+Y0wHBvvmQdgDGuKAT0wEHe/b1vFsEDDsvw8jNhywDQ9ZhwZl8seai9pZaRf/0bFFAeWiXHGMBPlBtWKO3z6TkrZBugXR1cHqpCTwEnMgPHW/sTzYwQ04NVdOxvtHmPs3DEqmo6W0NB09o30zohRLzmfhs5SuZLHeawfhUX5aXRJJLNclFX8t/8PTYh+uW+KE9gYJXpuJcWP7Yvgh15Fn1+7HODyckTZmEQ/BGuQXM4VpS0lBPQ460LXSgALXeIKz/ENoMNnPIuXMDSi4BAGF/qAFuG0ujAtGNyedjCq2sYWuBm0nuVn+7UHoFANxtQdHX2KXAn0YC8l8AKPY86ubIvTJBj+ZFSdt8k/3WrZycXucXyL5zYh/jr28yOMs3VTbWQI/0e+34Jo72KgyeRNIR+Q/KHqohWfwiUl4YY6hngIqUNjZO2CJ7IcdCGjgIBV0wXtvW+A/YHQo/qGIyIjUGknLlMurO4xkmulHfTi/ybZgrZfpid8c9QzUuTL+kFnmbcEd5nzMCbCYTZE/VRhFthKu+dEojXUX89RjQExaf4AOqe5aeR1m5UMlUCPdF7crGV43zOZFPUP/ifoISiznjX1qFDG0jwqPNEu4/emQaCdaacxLRHFWRGtThH8ACOxCOMCc/7iKeeecQ8bN+HSI8/fZcbt4="
    - AWS_ACCESS_KEY_ID=XZQSNWFHKYPQDESUJSTT
    - AWS_HOST=nyc3.digitaloceanspaces.com
    - AWS_BUCKET=com-erianna-travis
    - AWS_HOST_BUCKET="$AWS_BUCKET-$AWS_HOST"
  jobs:
    - BUILD_IMAGE=bionic BUILD_OS=Ubuntu BUILD_OS_VERSION=18.04
    - BUILD_IMAGE=xenial BUILD_OS=Ubuntu BUILD_OS_VERSION=16.04
    - BUILD_IMAGE=trusty BUILD_OS=Ubuntu BUILD_OS_VERSION=14.04
    - BUILD_IMAGE=centos7 BUILD_OS=CentOS BUILD_OS_VERSION=7
    - BUILD_IMAGE=rhel7 BUILD_OS=RHEL BUILD_OS_VERSION=7
    - BUILD_IMAGE=alpine3.7 BUILD_OS=Alpine BUILD_OS_VERSION=3.7
    - BUILD_IMAGE=alpine3.8 BUILD_OS=Alpine BUILD_OS_VERSION=3.8
    - BUILD_IMAGE=alpine3.9 BUILD_OS=Alpine BUILD_OS_VERSION=3.9
    - BUILD_IMAGE=alpine3.10 BUILD_OS=Alpine BUILD_OS_VERSION=3.10

language: generic
services:
  - docker

before_install:
  - sudo rm /usr/local/bin/docker-compose
  - curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - if [ "$BUILD_OS" == "Ubuntu" ]; then mkdir -p build/deb/$BUILD_IMAGE; fi
  - if [ "$BUILD_OS" == "Alpine" ]; then mkdir -p build/alpine/v$BUILD_OS_VERSION/x86_64; fi
  - if [ "$BUILD_OS" == "CentOS" ] || [ "$BUILD_OS" == "RHEL" ]; then mkdir -p build/rpm/$BUILD_OS/$BUILD_OS_VERSION/x86_64; fi

script:
  - if [ -n "$TRAVIS_TAG" ]; then export VERSION=$( cut -d '-' -f 1 <<< "$TRAVIS_TAG" ) export RELEASEVER=$( cut -d '-' -f 2 <<< "$TRAVIS_TAG" ); echo "Setting versions via TravisCI Tag"; fi
  - docker-compose run $BUILD_IMAGE
  - if [ "$BUILD_OS" == "Ubuntu" ]; then mv *$BUILD_IMAGE*.deb build/deb/$BUILD_IMAGE; fi
  - if [ "$BUILD_OS" == "Alpine" ]; then mv *.apk build/alpine/v$BUILD_OS_VERSION/x86_64; fi
  - if [ "$BUILD_OS" == "CentOS" ] || [ "$BUILD_OS" == "RHEL" ]; then mv *.rpm build/rpm/$BUILD_OS/$BUILD_OS_VERSION/x86_64; fi
  - find build -type f

deploy:
  provider: s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  bucket: $AWS_BUCKET
  local-dir: build
  skip_cleanup: true
  detect_encoding: true
  endpoint: https://$AWS_HOST
  on:
    tags: true
    all_branches: false
    repo: charlesportwoodii/libgeos-build
